{"version":3,"sources":["../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader-config.types.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.component.ts","../../../projects/ngx-skeleton-loader/src/lib/ngx-skeleton-loader.module.ts"],"names":["NGX_SKELETON_LOADER_CONFIG","InjectionToken","NgxSkeletonLoaderComponent","config","_a","_b","appearance","_c","animation","_d","theme","_e","loadingText","_f","count","this","items","prototype","ngOnInit","start","validateInputValues","test","isDevMode","console","error","length","allowedAnimations","indexOf","String","join","ngOnChanges","changes","find","key","isFirstChange","previousValue","currentValue","ngAfterViewInit","end","ngOnDestroy","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Inject","type","Optional","Input","NgxSkeletonLoaderModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","exports"],"mappings":"icAiBaA,EAA6B,IAAIC,EAAAA,eAAwC,2CCiCpF,SAAAC,EAA4DC,GACpD,IAAAC,EAAAD,GAAA,GAAEE,EAAAD,EAAAE,WAAAA,OAAA,IAAAD,EAAA,OAAAA,EAAqBE,EAAAH,EAAAI,UAAAA,OAAA,IAAAD,EAAA,WAAAA,EAAwBE,EAAAL,EAAAM,MAAAA,OAAA,IAAAD,EAAA,KAAAA,EAAcE,EAAAP,EAAAQ,YAAAA,OAAA,IAAAD,EAAA,aAAAA,EAA4BE,EAAAT,EAAAU,MAAAA,OAAA,IAAAD,EAAA,EAAAA,EAC/FE,KAAKT,WAAaA,EAClBS,KAAKP,UAAYA,EACjBO,KAAKL,MAAQA,EACbK,KAAKH,YAAcA,EACnBG,KAAKD,MAAQA,EACbC,KAAKC,MAAQ,UAGfd,EAAAe,UAAAC,SAAA,WACEC,EAAAA,MAAM,8BACNA,EAAAA,MAAM,4BAENJ,KAAKK,uBAGClB,EAAAe,UAAAG,oBAAA,WAED,QAAQC,KAAK,GAAGN,KAAKD,SAEpBQ,EAAAA,aACFC,QAAQC,MACN,mGAGJT,KAAKD,MAAQ,GAEfC,KAAKC,MAAMS,OAASV,KAAKD,UAEnBY,EAAoB,CAAC,WAAY,gBAAiB,QAAS,UACN,IAAvDA,EAAkBC,QAAQC,OAAOb,KAAKP,cAEpCc,EAAAA,aACFC,QAAQC,MACN,gEAAkEE,EAAkBG,KAClF,MACD,oCAGLd,KAAKP,UAAY,aAG8C,IAA7D,CAAC,SAAU,OAAQ,IAAImB,QAAQC,OAAOb,KAAKT,eAEzCgB,EAAAA,aACFC,QAAQC,MACN,4HAGJT,KAAKT,WAAa,KAItBJ,EAAAe,UAAAa,YAAA,SAAYC,GAKR,CAAC,QAAS,YAAa,cAAcC,MAAI,SACvCC,GACE,OAAAF,EAAQE,KAASF,EAAQE,GAAKC,iBAAmBH,EAAQE,GAAKE,gBAAkBJ,EAAQE,GAAKG,kBAMnGrB,KAAKK,uBAGPlB,EAAAe,UAAAoB,gBAAA,WACEC,EAAAA,IAAI,+BAGNpC,EAAAe,UAAAsB,YAAA,WACED,EAAAA,IAAI,sDAzGPE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,sBACVC,SAAA,8aAEAC,gBAAiBC,EAAAA,wBAAwBC,6vDA0B5BC,EAAAA,OAAMN,KAAA,CAACzC,IAA0B,CAAAgD,KAAGC,EAAAA,6CAlBhDC,EAAAA,2BAGAA,EAAAA,0BAGAA,EAAAA,yBAGAA,EAAAA,qBAGAA,EAAAA,0BCjCH,SAAAC,YACSA,EAAAC,QAAP,SAAejD,GACb,MAAO,CACLkD,SAAUF,EACVG,UAAW,CAAC,CAAEC,QAASvD,EAA4BwD,SAAUrD,+BATlEsD,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CAACxD,GACfyD,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC3D","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport type NgxSkeletonLoaderConfigTheme = {\n  // This is required since ngStyle is using `any` as well\n  // More details in https://angular.io/api/common/NgStyle\n  // tslint:disable-next-line: no-any\n  [k: string]: any;\n} | null;\n\nexport interface NgxSkeletonLoaderConfig {\n  appearance: 'circle' | 'line' | '';\n  animation: 'progress' | 'progress-dark' | 'pulse' | 'false' | false;\n  theme: NgxSkeletonLoaderConfigTheme;\n  loadingText: string;\n  count: number;\n}\n\nexport const NGX_SKELETON_LOADER_CONFIG = new InjectionToken<NgxSkeletonLoaderConfig>('ngx-skeleton-loader.config');\n","import {\n  Component,\n  OnInit,\n  Input,\n  isDevMode,\n  OnDestroy,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  OnChanges,\n  SimpleChanges,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport {\n  NgxSkeletonLoaderConfig,\n  NgxSkeletonLoaderConfigTheme,\n  NGX_SKELETON_LOADER_CONFIG,\n} from './ngx-skeleton-loader-config.types';\n\n@Component({\n  selector: 'ngx-skeleton-loader',\n  templateUrl: './ngx-skeleton-loader.html',\n  styleUrls: ['./ngx-skeleton-loader.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxSkeletonLoaderComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_count: number | string;\n  // tslint:disable-next-line: variable-name\n  static ngAcceptInputType_animation: boolean | string;\n\n  @Input()\n  count: NgxSkeletonLoaderConfig['count'];\n\n  @Input()\n  loadingText: NgxSkeletonLoaderConfig['loadingText'];\n\n  @Input()\n  appearance: NgxSkeletonLoaderConfig['appearance'];\n\n  @Input()\n  animation: NgxSkeletonLoaderConfig['animation'];\n\n  @Input()\n  theme: NgxSkeletonLoaderConfigTheme;\n\n  // tslint:disable-next-line: no-any\n  items: Array<any>;\n\n  constructor(@Inject(NGX_SKELETON_LOADER_CONFIG) @Optional() config?: NgxSkeletonLoaderConfig) {\n    const { appearance = 'line', animation = 'progress', theme = null, loadingText = 'Loading...', count = 1 } = config || {};\n    this.appearance = appearance;\n    this.animation = animation;\n    this.theme = theme;\n    this.loadingText = loadingText;\n    this.count = count;\n    this.items = [];\n  }\n\n  ngOnInit() {\n    start('NgxSkeletonLoader:Rendered');\n    start('NgxSkeletonLoader:Loaded');\n\n    this.validateInputValues();\n  }\n\n  private validateInputValues() {\n    // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n    if (!/^\\d+$/.test(`${this.count}`)) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`,\n        );\n      }\n      this.count = 1;\n    }\n    this.items.length = this.count;\n\n    const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n    if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(\n            ', ',\n          )}. Forcing default to \"progress\".`,\n        );\n      }\n      this.animation = 'progress';\n    }\n\n    if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(\n          `\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`,\n        );\n      }\n      this.appearance = '';\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Avoiding multiple calls for the same input in case there's no changes in the fields\n    // Checking if the fields that require validation are available and if they were changed\n    // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n    if (\n      ['count', 'animation', 'appearance'].find(\n        key =>\n          changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue),\n      )\n    ) {\n      return;\n    }\n\n    this.validateInputValues();\n  }\n\n  ngAfterViewInit() {\n    end('NgxSkeletonLoader:Rendered');\n  }\n\n  ngOnDestroy() {\n    end('NgxSkeletonLoader:Loaded');\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxSkeletonLoaderComponent } from './ngx-skeleton-loader.component';\nimport { NgxSkeletonLoaderConfig, NGX_SKELETON_LOADER_CONFIG } from './ngx-skeleton-loader-config.types';\n\n@NgModule({\n  declarations: [NgxSkeletonLoaderComponent],\n  imports: [CommonModule],\n  exports: [NgxSkeletonLoaderComponent],\n})\nexport class NgxSkeletonLoaderModule {\n  static forRoot(config?: Partial<NgxSkeletonLoaderConfig>): ModuleWithProviders<NgxSkeletonLoaderModule> {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n    };\n  }\n}\n"]}